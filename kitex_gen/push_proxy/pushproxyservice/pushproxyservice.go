// Code generated by Kitex v0.7.2. DO NOT EDIT.

package pushproxyservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	push_proxy "github.com/li1553770945/sheepim-push-proxy-service/kitex_gen/push_proxy"
)

func serviceInfo() *kitex.ServiceInfo {
	return pushProxyServiceServiceInfo
}

var pushProxyServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "PushProxyService"
	handlerType := (*push_proxy.PushProxyService)(nil)
	methods := map[string]kitex.MethodInfo{
		"PushMessage": kitex.NewMethodInfo(pushMessageHandler, newPushProxyServicePushMessageArgs, newPushProxyServicePushMessageResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "push_proxy",
		"ServiceFilePath": `idl/push-proxy.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func pushMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*push_proxy.PushProxyServicePushMessageArgs)
	realResult := result.(*push_proxy.PushProxyServicePushMessageResult)
	success, err := handler.(push_proxy.PushProxyService).PushMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPushProxyServicePushMessageArgs() interface{} {
	return push_proxy.NewPushProxyServicePushMessageArgs()
}

func newPushProxyServicePushMessageResult() interface{} {
	return push_proxy.NewPushProxyServicePushMessageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PushMessage(ctx context.Context, req *push_proxy.PushMessageReq) (r *push_proxy.PushMessageResp, err error) {
	var _args push_proxy.PushProxyServicePushMessageArgs
	_args.Req = req
	var _result push_proxy.PushProxyServicePushMessageResult
	if err = p.c.Call(ctx, "PushMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
